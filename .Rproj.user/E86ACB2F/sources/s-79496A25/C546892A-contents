---
title: "v3 simple stochastic model"
author: "Amy Dighe"
date: "16 January 2018"
output: html_document
---
# How is this an improvement on V2?

The code uses multinom instead of binom to get rid of the potential to exceed or not reach calculated outflow when summing inividual types of transitions - each camel can now only undergo one exclusive transition per timestep (per day)
```{r}

#states
S = 90    #susceptible
I = 10    #infected
R = 0     #recovered
N = S + I + R    #total camel population

#rates of transitions on a given day
b = 0.002 #probability of a birth (per camel)
mu = 0.002 #probability of death
lamda = 0.01 #probability of infection S-->I
sigm = 0.001 #probability of recovery to an immune, non-infectious state I-->R
omega = 0.0002 #probability of immunity waning R-->S


#rates --> probabilities
r2p <- function(r){
  p = 1 - exp(-r)
  print(p)
}

b_prob <- r2p(b)
mu_prob <- r2p(mu)
lamda_prob <- r2p(lamda)
sigm_prob <- r2p(sigm)
omega_prob <- r2p(omega)

stay_S_prob <- 1 - (mu_prob + lamda_prob)
Stay_I_prob <- 1 - (mu_prob + sigm_prob)
Stay_R_prob <- 1 - (mu_prob + omega_prob)

#length of time in days for model to run
dy = 365
time = seq(1:(3*dy))

#defining outflows
Outflow_R <- data.frame(waned = 0, dead = 0, remain = 0)
Outflow_S <- data.frame(infected = 0, dead = 0, remain = 0)
Outflow_I <- data.frame(recovered = 0, dead = 0,remain = 0)

for(i in 1:(length(time)-1)){
  
  Outflow_R[i,] <-(rmultinom(n = 1, size = R[i], prob = c(omega_prob, mu_prob, stay_S_prob)))[,1]
  Outflow_S[i,] <- (rmultinom(n = 1, size = S[i], prob = c(lamda_prob, mu_prob, Stay_I_prob)))[,1]
  Outflow_I[i,] <- (rmultinom(n = 1, size = I[i], prob = c(sigm_prob, mu_prob, Stay_R_prob)))[,1]
  
  new_birth <- sum(rpois(n = (S[i]+I[i]+R[i]), lambda = b_prob)) 
  new_waned <- Outflow_R$waned[i]  
  new_S <- new_birth + new_waned
  dead_S <- Outflow_S$dead[i]
  new_infectious <- Outflow_S$infected[i]
  dead_I <- Outflow_I$dead[i]
  new_recovered <- Outflow_I$recovered[i]
  dead_R <- Outflow_R$dead[i]
  
  S[i+1] = S[i] + new_birth + new_waned - new_infectious - dead_S
  I[i+1] = I[i] + new_infectious - new_recovered - dead_I
  R[i+1] = R[i] + new_recovered - new_waned - dead_R
  N[i+1] = S[i+1] + I[i+1] + R[i +1]
  
}

out <- data.frame(time, S, I, R, N)
matplot(x = out$time, y = out[c(2,3,4,5)], type = "l", lty = 1, lwd = 3, xlab = "time", ylab = "number of individuals")
legend("topright", lwd = 3, lty = 1, col = c("black", "red", "green", "blue"), legend = c("S", "I", "R", "N"))
```
