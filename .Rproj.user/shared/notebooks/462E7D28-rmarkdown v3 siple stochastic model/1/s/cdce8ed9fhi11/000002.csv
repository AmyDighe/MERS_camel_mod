"0","#states"
"0","S = 90    #susceptible"
"0","I = 10    #infected"
"0","R = 0     #recovered"
"0","N = S + I + R    #total camel population"
"0","#rates of transitions on a given day"
"0","b = 0.002 #probability of a birth (per camel)"
"0","mu = 0.002 #probability of death"
"0","lamda = 0.01 #probability of infection S-->I"
"0","sigm = 0.001 #probability of recovery to an immune, non-infectious state I-->R"
"0","omega = 0.0002 #probability of immunity waning R-->S"
"0","#rates --> probabilities"
"0","r2p <- function(r){"
"0","  p = 1 - exp(-r)"
"0","  return(p)"
"0","}"
"0","b_prob <- r2p(b)"
"0","mu_prob <- r2p(mu)"
"0","lamda_prob <- r2p(lamda)"
"0","sigm_prob <- r2p(sigm)"
"0","omega_prob <- r2p(omega)"
"0","stay_S_prob <- 1 - (mu_prob + lamda_prob)"
"0","Stay_I_prob <- 1 - (mu_prob + sigm_prob)"
"0","Stay_R_prob <- 1 - (mu_prob + omega_prob)"
"0","#length of time in days for model to run"
"0","dy = 365"
"0","time = seq(1:(3*dy))"
"0","#defining outflows"
"0","Outflow_R <- data.frame(waned = 0, dead = 0, remain = 0)"
"0","Outflow_S <- data.frame(infected = 0, dead = 0, remain = 0)"
"0","Outflow_I <- data.frame(recovered = 0, dead = 0,remain = 0)"
"0","for(i in 1:(length(time)-1)){"
"0","  "
"0","  Outflow_R[i,] <-(rmultinom(n = 1, size = R[i], prob = c(omega_prob, mu_prob, stay_S_prob)))[,1]"
"0","  Outflow_S[i,] <- (rmultinom(n = 1, size = S[i], prob = c(lamda_prob, mu_prob, Stay_I_prob)))[,1]"
"0","  Outflow_I[i,] <- (rmultinom(n = 1, size = I[i], prob = c(sigm_prob, mu_prob, Stay_R_prob)))[,1]"
"0","  "
"0","  new_birth <- sum(rpois(n = (S[i]+I[i]+R[i]), lambda = b_prob)) "
"0","  new_waned <- Outflow_R$waned[i]  "
"0","  new_S <- new_birth + new_waned"
"0","  dead_S <- Outflow_S$dead[i]"
"0","  new_infectious <- Outflow_S$infected[i]"
"0","  dead_I <- Outflow_I$dead[i]"
"0","  new_recovered <- Outflow_I$recovered[i]"
"0","  dead_R <- Outflow_R$dead[i]"
"0","  "
"0","  S[i+1] = S[i] + new_birth + new_waned - new_infectious - dead_S"
"0","  I[i+1] = I[i] + new_infectious - new_recovered - dead_I"
"0","  R[i+1] = R[i] + new_recovered - new_waned - dead_R"
"0","  N[i+1] = S[i+1] + I[i+1] + R[i +1]"
"0","  "
"0","}"
"0","out <- data.frame(time, S, I, R, N)"
"0","matplot(x = out$time, y = out[c(2,3,4,5)], type = ""l"", lty = 1, lwd = 3, xlab = ""time"", ylab = ""number of individuals"")"
